function FDM_eg2(DT,TEND)

%------------------------------------------
%step 1: set parameter: viacocity
%------------------------------------------
nu = 1.0;

%------------------------------------------
%step 2: define Spacial Domain and gride
%------------------------------------------
XL = 0;
XR = 1;
Ne = 10;
Nn = Ne + 1;
DX = (XR - XL)/Ne;
i = 1:Nn;
x(i) = (i-1) * DX + XL;
%step 3: set the final time and time step
% TEND = 0.9;%0.06 0.1 0.9 50.0
% DT = 0.01/6 ;
NT = TEND/  DT;
%------------------------------------------
%step 4: set the initial condition
%------------------------------------------
%unew(i) = uinit(x);
unew(i) = cos(pi*x/2);
uunew = zeros(1,12);
uunew(2:12) = unew;
uunew(1) = unew(2);
%------------------------------------------
%step 5: solution evolution
%------------------------------------------
time = 0;
IT = 1;
while IT <= NT
    uold(1:Nn+1) = uunew(1:Nn+1);
    time = IT * DT;
    %------------------------------------------
    %step 5.1 : update boundary point
    %------------------------------------------
    %unew(1) = uL(time);
    %unew(Nn) = uR(time);
    uunew(1) = uunew(3);
    uunew(Nn+1) = 0;
    %------------------------------------------
    %step 5.2 update interior point
    %------------------------------------------
    CrtNum = nu * DT / DX^2;
    i = 2 : Nn;
    uunew(i) = uold(i) + CrtNum * (uold(i+1) - 2*uold(i) + uold(i-1));
    %------------------------------------------
    IT = IT + 1;
end
%exact solution
Ne = 1000;
Nn  = Ne + 1;
xe = ((1:Nn) - 1) * (XR-XL)/Ne;
alpha = -(pi/2)^2;
ue = exp(time*alpha).*cos(pi*xe/2);
%------------------------------------------
%step 6: output the solution
%------------------------------------------
uunew = uunew(2:12);
createfigure1(x,uunew,xe,ue);

%plot(xe,ue,'-');
%legend('Num. Sol.','Exact Sol.');
% if TEND == 0.06
%     axis([0,1,-0.12,0.12]) %TEND = 0.06Ê±ºòÓÃ
% end
% 
% if TEND == 0.1 && DT > 0.001
%     axis([0,1,-0.025,0.025])
% end
%axis_cgx([x,xe],[unew,ue]);
%------------------------------------------
%print(gcf,'-depsc','-r600','intrFDM.eps');
end

function createfigure1(X1, Y1, X2, Y2)
%CREATEFIGURE1(X1, Y1, X2, Y2)
%  X1:  vector of x data
%  Y1:  vector of y data
%  X2:  vector of x data
%  Y2:  vector of y data

%  Auto-generated by MATLAB on 04-Mar-2019 13:41:19

% Create figure
figure1 = figure;

% Create axes
axes1 = axes('Parent',figure1);
hold(axes1,'on');

% Create plot
plot(X1,Y1,'DisplayName','Num. Sol.','MarkerFaceColor',[0 1 1],...
    'MarkerSize',8,...
    'Marker','o',...
    'LineStyle','none');

% Create plot
plot(X2,Y2,'DisplayName','Exact Sol.','LineWidth',2,'Color',[1 0 0]);

% Uncomment the following line to preserve the X-limits of the axes
% xlim(axes1,[0 1]);
% Uncomment the following line to preserve the Y-limits of the axes
% ylim(axes1,[-0.12 0.12]);
box(axes1,'on');
% Set the remaining axes properties
set(axes1,'FontSize',44);
% Create legend
legend1 = legend(axes1,'show');
set(legend1,'FontSize',30);
end